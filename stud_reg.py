import os, sys, sqlite3, math,logging
from contextlib import closing
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup

router = Router()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  
if not BOT_TOKEN or not ADMIN_ID:
    sys.exit("Error: BOT_TOKEN or ADMIN_ID environment variable not set.")

DB_PATH = "bot_db.sqlite3"

def init_db():
    with closing(sqlite3.connect(DB_PATH)) as conn:
        with conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT, 
                    name TEXT NOT NULL,  
                    age INTEGER NOT NULL,  
                    gender TEXT, 
                    ph_num INTEGER NOT NULL,    
                    latitude REAL,
                    longitude REAL,
                    user_id INTEGER,
                    first_name TEXT,
                    last_name TEXT,
                    username TEXT
                        
                );
            """)
            conn.commit()


def is_registered(user_id: int) -> bool:
    return user_id in [user[7] for user in list_users()]


def add_user(name: str, age: int, gender: str, ph_num: int, latitude: float, longitude: float, user_id: int = None, first_name: str = "", last_name: str = "", username: str = ""):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        with conn:
            conn.execute("INSERT INTO users (name, age, gender, ph_num, latitude, longitude, user_id, first_name, last_name, username) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 
                         (name, age, gender, ph_num, latitude, longitude, user_id, first_name, last_name, username))

def list_users():
    with closing(sqlite3.connect(DB_PATH)) as conn:
        return conn.execute("SELECT id, name, age, gender, ph_num, latitude, longitude, user_id, first_name, last_name, username FROM users").fetchall()

def remove_user(id: int):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        with conn:
            conn.execute("DELETE FROM users WHERE id = ?", (id,))
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
    ],
    resize_keyboard=True
)


menu_2 = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")],
    ],
    resize_keyboard=True
)


@router.message(Command("info"))
async def info_command(message: types.Message):
    

    response_menu = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")],
            [KeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: ", reply_markup=response_menu)


def haversine(lat1, lon1, lat2, lon2):
    R = 6371  
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lat2 - lon2)
    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

class FSMAdminAdd(StatesGroup):
    name = State()
    age = State()
    gender = State()
    ph_num = State()
    latitude = State()
    longitude = State()

class FSMAdminDel(StatesGroup):
    choose_user = State()

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
        ],
        resize_keyboard=True
    )
    keyboard_2 = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]
        ],
        resize_keyboard=True
    )
    if is_admin(message.from_user.id):
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –≠—Ç–æ –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "üìã–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è –≤–∞—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∫–æ—Ç–æ—Ä—ã–º –æ–±—É—á–∞—é—Ç –≤ –û–®–≥—É. –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ê –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /info .

–ü–æ –≤—Å–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞: @vulpes_07.

–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö –∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ: https://www.oshsu.kg/ru/page/56

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
            reply_markup=keyboard_2
        )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def handle_add_user_button(message: types.Message, state: FSMContext):
    await start_add_user(message, state)

@router.message(F.text == "‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def handle_add_user_button(message: types.Message, state: FSMContext):
    await start_add_user(message, state)

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def handle_list_users_button(message: types.Message):
    await list_users_command(message)

@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def handle_remove_user_button(message: types.Message, state: FSMContext):
    await start_remove_user(message, state)

@router.message(Command("add_user"))
async def start_add_user(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(FSMAdminAdd.name)


@router.message(FSMAdminAdd.name)
async def load_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(FSMAdminAdd.age)

@router.message(FSMAdminAdd.age)
async def load_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç.")
        return
    await state.update_data(age=int(message.text))
    await state.set_state(FSMAdminAdd.gender) 
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—á–∏–Ω–∞", callback_data="gender_male")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]
    ]))
    await state.set_state(FSMAdminAdd.gender)

@router.callback_query(lambda call: call.data.startswith("gender_"))
async def load_gender(callback_query: types.CallbackQuery, state: FSMContext):
    gender = "–ú—É–∂—á–∏–Ω–∞" if callback_query.data == "gender_male" else "–ñ–µ–Ω—â–∏–Ω–∞"
    await state.update_data(gender=gender)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(FSMAdminAdd.ph_num)

@router.message(FSMAdminAdd.ph_num)
async def load_ph_num(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    await state.update_data(ph_num=int(message.text))
    await message.answer(f"{message.from_user.full_name}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.", reply_markup=menu)
    await state.set_state(FSMAdminAdd.latitude)

@router.message(F.location)
async def location_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    required_fields = ["name", "age", "gender", "ph_num"]
    for field in required_fields:
        if field not in user_data:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            await state.clear()  
            return

    
    add_user(
        name=user_data["name"],
        age=user_data["age"],
        gender=user_data["gender"],
        ph_num=user_data["ph_num"],
        latitude=message.location.latitude,
        longitude=message.location.longitude,
        user_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        username=message.from_user.username
    )
    await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞",  reply_markup=menu_2)
    await state.clear()  

@router.message(Command("list_users"))
async def list_users_command(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    users = list_users()
    if not users:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    response = "\n".join([f"""
{id}. {name} 
–í–æ–∑—Ä–∞—Å—Ç: {age}
–ü–æ–ª: {gender}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {ph_num}  
–õ–æ–∫–∞—Ü–∏—è: —à–∏—Ä–æ—Ç–∞: {latitude}, –¥–æ–ª–≥–æ—Ç–∞: {longitude}
username: @{username if username else '-'}
–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —É–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ç–≥: {first_name} {last_name}
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}""" 
                          for id, name, age, gender, ph_num, latitude, longitude, user_id, first_name, last_name, username in users])
    await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{response}")



@router.message(Command("remove_user"))
async def start_remove_user(message: types.Message, state: FSMContext):
    users = list_users()

    if not users:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{user[0]}. {user[1]}", callback_data=f"remove_{user[0]}")]
            for user in users
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@router.callback_query(lambda query: query.data and query.data.startswith("remove_"))
async def process_remove_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split("_")[1])

    remove_user(user_id)

    await callback_query.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")
    await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")

    await state.clear()
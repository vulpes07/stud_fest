import os, sys, math
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from database import init_db, add_user, list_users, remove_user
from reply_keyboard import menu_eng, menu, menu_germ, menu_kyrg
from reply_keyboard import response_menu, response_menu_eng, response_menu_germ, response_menu_kyrg
from reply_keyboard import menu_2_germ, menu_2_kyrg, menu_2_eng, menu_2
from dotenv import load_dotenv
load_dotenv()


router = Router()

init_db()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  
if not BOT_TOKEN or not ADMIN_ID:
    sys.exit("Error: BOT_TOKEN or ADMIN_ID environment variable not set.")

DB_PATH = "bot_db.sqlite3"


PHONE_PROMPTS = {
    "ru": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
    "kg": "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∏“£–∏–∑–¥–∏ –∂–∞–∑—ã“£—ã–∑:",
    "en": "Enter your phone number:",
    "de": "Geben Sie Ihre Telefonnummer ein:"
}  



import requests

def get_address_from_coords(lat, lon):
    try:
        url = "https://nominatim.openstreetmap.org/reverse"
        params = {
            "lat": lat,
            "lon": lon,
            "format": "json",
            "zoom": 18, 
            "addressdetails": 1
        }
        headers = {
            "User-Agent": "OSH_SU_PROFESSIONS_CHOOSER"  
        }
        response = requests.get(url, params=params, headers=headers)
        data = response.json()
        address = data.get("address", {})

        road = address.get("road", "")
        house_number = address.get("house_number", "")
        neighbourhood = address.get("neighbourhood", "")
        suburb = address.get("suburb", "")
        city = address.get("city") or address.get("town") or address.get("village", "")
        state = address.get("state", "")
        country = address.get("country", "")

        components = [road, house_number, neighbourhood, suburb, city, state, country]
        return ", ".join([part for part in components if part])
    except Exception as e:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å"




def haversine(lat1, lon1, lat2, lon2):
    R = 6371  
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lat2 - lon2)
    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

class FSMAdminAdd(StatesGroup):
    name = State()
    age = State()
    gender = State()
    lang = State()
    ph_num = State()
    latitude = State()
    longitude = State()

class FSMAdminDel(StatesGroup):
    choose_user = State()

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID


keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
        ],
        resize_keyboard=True
    )
keyboard_2 = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")],
            [KeyboardButton(text="‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]
        ],
        resize_keyboard=True
    )




@router.message(Command("start_rus"))
async def cmd_start_rus(message: types.Message):
    await message.answer(
            f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è –≤–∞—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∫–æ—Ç–æ—Ä—ã–º –æ–±—É—á–∞—é—Ç –≤ –û–®–≥—É. –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ê –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /info.

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫, –Ω–∞–∂–º–∏—Ç–µ /start          

–ü–æ –≤—Å–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞: @vulpes_07.

–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö –∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ: https://www.oshsu.kg/ru/page/56

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
            reply_markup=keyboard_2
        )

@router.message(Command("admin"))
async def admin_greeting(message: types.Message):
    if is_admin(message.from_user.id):
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.first_name}!\n"
            "üõ† –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ",
            reply_markup=keyboard_2
        )
@router.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    else:
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.first_name}!\n"
            "üõ† –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
            reply_markup=keyboard)  


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def handle_add_user_button(message: types.Message, state: FSMContext):
    await start_add_user(message, state)

@router.message(F.text == "‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def handle_add_user_button(message: types.Message, state: FSMContext):
    await start_add_user(message, state)

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def handle_list_users_button(message: types.Message):
    await list_users_command(message)

@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def handle_remove_user_button(message: types.Message, state: FSMContext):
    await start_remove_user(message, state)

@router.message(Command("add_user"))
async def start_add_user(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(FSMAdminAdd.name)


@router.message(FSMAdminAdd.name)
async def load_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(FSMAdminAdd.age)

@router.message(FSMAdminAdd.age)
async def load_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç.")
        return
    await state.update_data(age=int(message.text))
    await state.set_state(FSMAdminAdd.gender) 
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—á–∏–Ω–∞", callback_data="gender_male")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]
    ]))
    await state.set_state(FSMAdminAdd.gender)

@router.callback_query(lambda call: call.data.startswith("gender_"))
async def load_gender(callback_query: types.CallbackQuery, state: FSMContext):
    
    data = await state.get_data()
    lang = data.get("lang", "ru")  
    
    gender = "–ú—É–∂—á–∏–Ω–∞" if callback_query.data == "gender_male" else "–ñ–µ–Ω—â–∏–Ω–∞"
    await state.update_data(gender=gender, lang=lang)
    await callback_query.message.answer(PHONE_PROMPTS.get(lang, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"))
    await state.set_state(FSMAdminAdd.ph_num)
    
@router.message(FSMAdminAdd.ph_num)
async def load_ph_num(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    await state.update_data(ph_num=int(message.text))
    LOCATION_PROMPTS = {
    "ru": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –≤–∫–ª—é—á–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç ",
    "kg": "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è“£—ã–∑–¥—ã –∂”©–Ω”©—Ç“Ø“£“Ø–∑, —É—á—É—Ä–¥–∞–≥—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è“£—ã–∑–¥—ã –∞–Ω—ã–∫—Ç–æ–æ “Ø—á“Ø–Ω –ª–æ–∫–∞—Ü–∏—è –∂–∞“£–¥—ã—Ä—ã“£—ã–∑",
    "en": "Send your geolocation, enable location on your device to determine your current geolocation",
    "de": "Senden Sie Ihre Geolokalisierung, aktivieren Sie die Ortung auf Ihrem Ger√§t, um Ihre aktuelle Geolokalisierung zu bestimmen"
    }

    lang = (await state.get_data()).get("lang", "ru")
    await message.answer(f"{message.from_user.full_name}, {LOCATION_PROMPTS[lang]}",  
    reply_markup=menu if lang == "ru" 
    else menu_eng if lang == "en" 
    else menu_germ if lang == "de" 
    else menu_kyrg )



    await state.set_state(FSMAdminAdd.latitude)

@router.message(F.location)
async def location_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    lang = user_data.get("lang", "ru")  
    
    
    SUCCESS_MSGS = {
    "ru": "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞",
    "en": "The data has been saved successfully! Thank you for the registration, now you can use bot functions",
    "de": "Die Daten wurden erfolgreich gespeichert! Vielen Dank f√ºr die Registrierung, jetzt k√∂nnen Sie die Bot-Funktionen nutzen",
    "kg": "–î–∞–π—ã–Ω–¥–∞—Ä—ã“£—ã–∑ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∫–æ—à—É–ª–¥—É! –ö–∞—Ç—Ç–æ–æ–¥–æ–Ω ”©—Ç–∫”©–Ω“Ø“£“Ø–∑ “Ø—á“Ø–Ω —Ä–∞—Ö–º–∞—Ç, –±–æ—Ç—Ç—É–Ω –º“Ø–º–∫“Ø–Ω—á“Ø–ª“Ø–∫—Ç”©—Ä“Ø–Ω –∫–æ–ª–¥–æ–Ω–æ –∞–ª–∞—Å—ã–∑"
    }

    add_user(
        name=user_data["name"],
        age=user_data["age"],
        gender=user_data["gender"],
        ph_num=user_data["ph_num"],
        latitude=message.location.latitude,
        longitude=message.location.longitude,
        user_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        username=message.from_user.username
    )
    await message.answer(
    SUCCESS_MSGS[lang], 
    reply_markup=menu_2 if lang == "ru" 
    else menu_2_eng if lang == "en" 
    else menu_2_germ if lang == "de" 
    else menu_2_kyrg
    )
    await state.clear()



@router.message(Command("info"))
async def info_command(message: types.Message, state: FSMContext):
    
    lang = (await state.get_data()).get("lang", "ru")
    COMM_LIST_PROMPTS = {
    "ru": "üìã–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: ",
    "kg": "üìã–ñ–µ—Ç–∫–∏–ª–∏–∫—Ç“Ø“Ø –±—É–π—Ä—É–∫—Ç–∞—Ä–¥—ã–Ω —Ç–∏–∑–º–µ—Å–∏: ",
    "en": "üìãList of the available cammands: ",
    "de": "üìãListe der verf√ºgbaren Befehle: "
    }

    await message.answer(f"{message.from_user.full_name}, {COMM_LIST_PROMPTS[lang]}",  
    reply_markup=response_menu if lang == "ru" 
    else response_menu_eng if lang == "en" 
    else response_menu_germ if lang == "de" 
    else response_menu_kyrg )






@router.message(Command("list_users"))
async def list_users_command(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    users = list_users()
    if not users:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    response_lines = []
    for id, name, age, gender, ph_num, latitude, longitude, user_id, first_name, last_name, username in users:
        location_str = get_address_from_coords(latitude, longitude)
        response_lines.append(f"""
{id}. {name} 
1. –í–æ–∑—Ä–∞—Å—Ç: {age}
2. –ü–æ–ª: {gender}
3. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {ph_num}
4. username: @{username if username else '-'}
5. –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —É–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ç–≥: {first_name} {last_name}
6. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}
7. –õ–æ–∫–∞—Ü–∏—è: {location_str}
8. –õ–æ–∫–∞—Ü–∏—è: —à–∏—Ä–æ—Ç–∞: {latitude}, –¥–æ–ª–≥–æ—Ç–∞: {longitude}
""") 
    await message.answer(f"üìã–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{''.join(response_lines)}")




@router.message(Command("remove_user"))
async def start_remove_user(message: types.Message, state: FSMContext):
    users = list_users()

    if not users:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{user[0]}. {user[1]}", callback_data=f"remove_{user[0]}")]
            for user in users
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@router.callback_query(lambda query: query.data and query.data.startswith("remove_"))
async def process_remove_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split("_")[1])
    remove_user(user_id)

    data = await state.get_data()
    lang = data.get("lang", "ru")  


    del_resp = (f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω." if lang == "ru" 
                else f"‚úÖ The user: {user_id} was removed." if lang == "en" 
                else f"‚úÖ Der Benutzer: {user_id} wurde entfernt." if lang == "de"  
                else f"‚úÖ –ö–æ–ª–¥–æ–Ω—É—É—á—É {user_id} –∂–æ–∫ –∫—ã–ª—ã–Ω–¥—ã.")

    await callback_query.message.edit_text(del_resp)
    await state.clear()   

import os, sys, math,logging
from contextlib import closing
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from database import init_db, is_registered, add_user, list_users, remove_user
from reply_keyboard import menu_2, menu_2_eng, menu_2_germ, menu_2_kyrg
from reply_keyboard import menu_eng, menu, menu_germ, menu_kyrg
from reply_keyboard import response_menu, response_menu_eng, response_menu_germ, response_menu_kyrg


router_kyrg = Router()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  
if not BOT_TOKEN or not ADMIN_ID:
    sys.exit("Error: BOT_TOKEN or ADMIN_ID environment variable not set.")

DB_PATH = "bot_db.sqlite3"

init_db()




def haversine(lat1, lon1, lat2, lon2):
    R = 6371  
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lat2 - lon2)
    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

class FSMAdminAddKyrg(StatesGroup):
    name = State()
    age = State()
    gender = State()
    ph_num = State()
    latitude = State()
    longitude = State()

class FSMAdminDelKyrg(StatesGroup):
    choose_user = State()

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID



keyboard_kyrg = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ö–µ—Å–∏–ø —Ç–∞–Ω–¥–æ–æ")],
            [KeyboardButton(text="‚ûï –ö–æ–ª–¥–æ–Ω—É—É—á—É –∫–æ—à—É—É")],
            [KeyboardButton(text="üìã –ö–æ–ª–¥–æ–Ω—É—É—á—É–ª–∞—Ä–¥—ã–Ω —Ç–∏–∑–º–µ—Å–∏")],
            [KeyboardButton(text="‚ùå –ö–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É –∂–æ–∫ –∫—ã–ª—É—É")]
        ],
        resize_keyboard=True
    )
keyboard_2_kyrg = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")],
            [KeyboardButton(text="‚ûï –ö–∞—Ç—Ç–∞–ª—É—É")]
        ],
        resize_keyboard=True
    )


@router_kyrg.message(Command("start_kyrg"))
async def cmd_start_kyrg(message: types.Message):

    await message.answer(
            f"""üëã –°–∞–ª–∞–º, {message.from_user.first_name}! –°–∏–∑ –û—à–ú–£–¥–∞ –æ–∫—É—Ç—É–ª–≥–∞–Ω —Å–∏–∑–≥–µ —ã–ª–∞–π—ã–∫—Ç—É—É –∫–µ—Å–∏–ø—Ç–∏ –∞–Ω—ã–∫—Ç–æ–æ “Ø—á“Ø–Ω –±–æ—Ç–∫–æ –∫–æ—à –∫–µ–ª–∏“£–∏–∑. –ë–æ—Ç—Ç—É–Ω —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã–Ω –∫–æ–ª–¥–æ–Ω—É—É–¥–∞–Ω –º—É—Ä—É–Ω, –∫–∞—Ç—Ç–æ–æ–¥–æ–Ω ”©—Ç“Ø“£“Ø–∑. –ê–ª —ç–º–∏ —Å–∏–∑ –±—É–≥–∞ —á–µ–π–∏–Ω –∫–∞—Ç—Ç–∞–ª–≥–∞–Ω –±–æ–ª—Å–æ“£—É–∑, /info –±–∞—Å—ã“£—ã–∑.

–¢–∏–ª–¥–∏ ”©–∑–≥”©—Ä—Ç“Ø“Ø–Ω“Ø –∫–∞–∞–ª–∞—Å–∞“£—ã–∑, /start –±–∞—Å–∫—ã—á—ã–Ω –±–∞—Å—ã“£—ã–∑            

–ë–∞—Ä–¥—ã–∫ –∫–æ—à—É–º—á–∞ —Å—É—Ä–æ–æ–ª–æ—Ä –±–æ—é–Ω—á–∞ –±–æ—Ç—Ç—É–Ω –∂–∞—Ä–∞—Ç—É—É—á—É—Å—É–Ω–∞ –∫–∞–π—Ä—ã–ª—ã“£—ã–∑: @vulpes_07.

–ë—É–ª —Å–∞–π—Ç—Ç–∞ –∞–¥–∏—Å—Ç–∏–∫—Ç–µ—Ä –∂–∞–Ω–∞ –∫–∞–±—ã–ª –∞–ª—É—É–ª–∞—Ä –∂”©–Ω“Ø–Ω–¥”© —Ç–æ–ª—É–∫ –º–∞–∞–ª—ã–º–∞—Ç: https://www.oshsu.kg/ru/page/56

–§—É–Ω–∫—Ü–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑:""",
            reply_markup=keyboard_2_kyrg
        )


@router_kyrg.message(Command("admin"))
async def admin_greeting(message: types.Message):
    if is_admin(message.from_user.id):
        await message.answer(
            f"üëã –°–∞–ª–∞–º–∞—Ç—Å—ã–∑–±—ã, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.first_name}!\n"
            "üõ† –°–∏–∑–≥–µ –±–∞—Ä–¥—ã–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–¥–∏–∫ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä –∂–µ—Ç–∫–∏–ª–∏–∫—Ç“Ø“Ø:",
            reply_markup=keyboard_kyrg
        )
    else:
        await message.answer(
            "‚õî –ë—É–ª –±—É–π—Ä—É–∫–∫–∞ –∫–∏—Ä“Ø“Ø —É–∫—É–≥—É“£—É–∑ –∂–æ–∫",
            reply_markup=keyboard_2_kyrg
        )

@router_kyrg.message(F.text == "üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ë—É–ª —Ñ—É–Ω–∫—Ü–∏—è–≥–∞ –∫–∏—Ä“Ø“Ø —É–∫—É–≥—É“£—É–∑ –∂–æ–∫")
        return
    else:
        await message.answer(
            f"üëã –°–∞–ª–∞–º–∞—Ç—Å—ã–∑–±—ã, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.first_name}!\n"
            "üõ† –°–∏–∑–≥–µ –±–∞—Ä–¥—ã–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–¥–∏–∫ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä –∂–µ—Ç–∫–∏–ª–∏–∫—Ç“Ø“Ø:",
            reply_markup=keyboard_kyrg)




@router_kyrg.message(F.text == "‚ûï –ö–æ–ª–¥–æ–Ω—É—É—á—É –∫–æ—à—É—É")
async def handle_add_user_button(message: types.Message, state: FSMContext):
    await state.update_data(lang="kg")  
    await start_add_user(message, state)

@router_kyrg.message(F.text == "‚ûï –ö–∞—Ç—Ç–∞–ª—É—É")
async def handle_add_user_button(message: types.Message, state: FSMContext):
    await state.update_data(lang="kg")  
    await start_add_user(message, state)

@router_kyrg.message(F.text == "üìã –ö–æ–ª–¥–æ–Ω—É—É—á—É–ª–∞—Ä–¥—ã–Ω —Ç–∏–∑–º–µ—Å–∏")
async def handle_list_users_button(message: types.Message):
    await list_users_command(message)

@router_kyrg.message(F.text == "‚ùå –ö–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É –∂–æ–∫ –∫—ã–ª—É—É")
async def handle_remove_user_button(message: types.Message, state: FSMContext):
    await start_remove_user(message, state)

@router_kyrg.message(Command("add_user"))
async def start_add_user(message: types.Message, state: FSMContext):
    await message.answer("–ê—Ç—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:")
    await state.set_state(FSMAdminAddKyrg.name)


@router_kyrg.message(FSMAdminAddKyrg.name)
async def load_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ñ–∞—à—ã–Ω—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:")
    await state.set_state(FSMAdminAddKyrg.age)

@router_kyrg.message(FSMAdminAddKyrg.age)
async def load_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ñ–∞—à—ã–Ω—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑.")
        return
    await state.update_data(age=int(message.text))
    await state.set_state(FSMAdminAddKyrg.gender) 
    await message.answer("–ñ—ã–Ω—ã—Å—ã“£—ã–∑–¥—ã —Ç–∞–Ω–¥–∞“£—ã–∑:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–≠—Ä–∫–µ–∫", callback_data="gender_male")],
        [InlineKeyboardButton(text="–ê—è–ª", callback_data="gender_female")]
    ]))
    await state.set_state(FSMAdminAddKyrg.gender)

@router_kyrg.callback_query(lambda call: call.data.startswith("gender_"))
async def load_gender(callback_query: types.CallbackQuery, state: FSMContext):
    gender = "–≠—Ä–∫–µ–∫" if callback_query.data == "gender_male" else "–ê—è–ª"
    await state.update_data(gender=gender)
    await callback_query.message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∏“£–∏–∑–¥–∏ –∂–∞–∑—ã“£—ã–∑:")
    await state.set_state(FSMAdminAddKyrg.ph_num)


@router_kyrg.message(FSMAdminAddKyrg.ph_num)
async def load_ph_num(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∏“£–∏–∑–¥–∏ –∂–∞–∑—ã“£—ã–∑.")
        return
    await state.update_data(ph_num=int(message.text))

    


    LOCATION_PROMPTS = {
    "ru": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –≤–∫–ª—é—á–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç ",
    "kg": "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è“£—ã–∑–¥—ã –∂”©–Ω”©—Ç“Ø“£“Ø–∑, —É—á—É—Ä–¥–∞–≥—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è“£—ã–∑–¥—ã –∞–Ω—ã–∫—Ç–æ–æ “Ø—á“Ø–Ω –ª–æ–∫–∞—Ü–∏—è –∂–∞“£–¥—ã—Ä—ã“£—ã–∑",
    "en": "Send your geolocation, enable location on your device to determine your current geolocation",
    "de": "Senden Sie Ihre Geolokalisierung, aktivieren Sie die Ortung auf Ihrem Ger√§t, um Ihre aktuelle Geolokalisierung zu bestimmen"
    }

    
    lang = (await state.get_data()).get("lang", "kg")
    await message.answer(f"{message.from_user.full_name}, {LOCATION_PROMPTS[lang]}",  
    reply_markup=menu if lang == "ru" 
    else menu_eng if lang == "en" 
    else menu_germ if lang == "de" 
    else menu_kyrg )
    await state.set_state(FSMAdminAddKyrg.latitude)




@router_kyrg.message(F.location)
async def location_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    required_fields = ["name", "age", "gender", "ph_num"]
    for field in required_fields:
        if field not in user_data:
            await message.answer(f"–ö–∞—Ç–∞ –∫–µ—Ç—Ç–∏: {field} —Ç–∞–ª–∞–∞—Å—ã –∂–æ–∫. –ö–∞—Ç—Ç–æ–æ–Ω—É –∫–∞–π—Ä–∞ –±–∞—à—Ç–æ–æ–≥–æ –∞—Ä–∞–∫–µ—Ç –∫—ã–ª—ã“£—ã–∑.")
            await state.clear()  
            return

    
    add_user(
        name=user_data["name"],
        age=user_data["age"],
        gender=user_data["gender"],
        ph_num=user_data["ph_num"],
        latitude=message.location.latitude,
        longitude=message.location.longitude,
        user_id=message.from_user.id,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        username=message.from_user.username
    )
    SUCCESS_MSGS = {
    "ru": "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞",
    "en": "The data has been saved successfully! Thank you for the registration, now you can use bot functions",
    "de": "Die Daten wurden erfolgreich gespeichert! Vielen Dank f√ºr die Registrierung, jetzt k√∂nnen Sie die Bot-Funktionen nutzen",
    "kg": "–î–∞–π—ã–Ω–¥–∞—Ä—ã“£—ã–∑ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∫–æ—à—É–ª–¥—É! –ö–∞—Ç—Ç–æ–æ–¥–æ–Ω ”©—Ç–∫”©–Ω“Ø“£“Ø–∑ “Ø—á“Ø–Ω —Ä–∞—Ö–º–∞—Ç, –±–æ—Ç—Ç—É–Ω –º“Ø–º–∫“Ø–Ω—á“Ø–ª“Ø–∫—Ç”©—Ä“Ø–Ω –∫–æ–ª–¥–æ–Ω–æ –∞–ª–∞—Å—ã–∑"
    }

    lang = (await state.get_data()).get("lang", "kg")
    await message.answer(
    SUCCESS_MSGS[lang], 
    reply_markup=menu_2 if lang == "ru" 
    else menu_2_eng if lang == "en" 
    else menu_2_germ if lang == "de" 
    else menu_2_kyrg
    )
    await state.clear()  





@router_kyrg.message(Command("info"))
async def info_command(message: types.Message, state: FSMContext):
    lang = (await state.get_data()).get("lang", "kg")
    COMM_LIST_PROMPTS = {
    "ru": "üìã–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: ",
    "kg": "üìã–ñ–µ—Ç–∫–∏–ª–∏–∫—Ç“Ø“Ø –±—É–π—Ä—É–∫—Ç–∞—Ä–¥—ã–Ω —Ç–∏–∑–º–µ—Å–∏: ",
    "en": "üìãList of the available cammands: ",
    "de": "üìãListe der verf√ºgbaren Befehle: "
    }
    await message.answer(f"{message.from_user.full_name}, {COMM_LIST_PROMPTS[lang]}",  
    reply_markup=response_menu if lang == "ru" 
    else response_menu_eng if lang == "en" 
    else response_menu_germ if lang == "de" 
    else response_menu_kyrg )




@router_kyrg.message(Command("list_users"))
async def list_users_command(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–ë—É–ª –∫–æ–º–∞–Ω–¥–∞–≥–∞ –∫–æ–ª–¥–æ–Ω—É—É–≥–∞ –º“Ø–º–∫“Ø–Ω—á“Ø–ª“Ø–≥“Ø“£“Ø–∑ –∂–æ–∫.")
        return
    users = list_users()
    if not users:
        await message.answer("–ú–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä –±–∞–∑–∞—Å—ã–Ω–¥–∞ –∫–æ–ª–¥–æ–Ω—É—É—á—É–ª–∞—Ä –∂–æ–∫.")
        return

    response = "\n".join([f"""
{id}. {name} 
–í–æ–∑—Ä–∞—Å—Ç: {age}
–ü–æ–ª: {gender}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {ph_num}  
–õ–æ–∫–∞—Ü–∏—è: —à–∏—Ä–æ—Ç–∞: {latitude}, –¥–æ–ª–≥–æ—Ç–∞: {longitude}
username: @{username if username else '-'}
–ö–æ–ª–¥–æ–Ω—É—É—á—É —Ç–∞—Ä–∞–±—ã–Ω–∞–Ω –∫”©—Ä—Å”©—Ç“Ø–ª–≥”©–Ω –∞—Ç—ã –∂–∞–Ω–∞ —Ñ–∞–º–∏–ª–∏—è—Å—ã —Ç–µ–ª–µ–≥—Ä–∞–º–¥–∞: {first_name} {last_name}
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}""" 
                          for id, name, age, gender, ph_num, latitude, longitude, user_id, first_name, last_name, username in users])
    await message.answer(f"üìã–ö–æ–ª–¥–æ–Ω—É—É—á—É–ª–∞—Ä–¥—ã–Ω —Ç–∏–∑–º–µ—Å–∏:\n{response}")



@router_kyrg.message(Command("remove_user"))
async def start_remove_user(message: types.Message, state: FSMContext):
    users = list_users()

    if not users:
        await message.answer("–ú–∞–∞–ª—ã–º–∞—Ç –±–∞–∑–∞—Å—ã–Ω–¥–∞ –∂–æ–∫ –∫—ã–ª—É—É “Ø—á“Ø–Ω –∫–æ–ª–¥–æ–Ω—É—É—á—É–ª–∞—Ä –∂–æ–∫.")
        return

    kb_kyrg = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{user[0]}. {user[1]}", callback_data=f"remove_{user[0]}")]
            for user in users
        ]
    )

    await message.answer("–ñ–æ–∫ –∫—ã–ª—É—É “Ø—á“Ø–Ω –∫–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É —Ç–∞–Ω–¥–∞“£—ã–∑:", reply_markup=kb_kyrg)


@router_kyrg.callback_query(lambda query: query.data and query.data.startswith("remove_"))
async def process_remove_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split("_")[1])
    remove_user(user_id)

    data = await state.get_data()
    lang = data.get("lang", "kg") 


    del_resp = (f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω." if lang == "ru" 
                else f"‚úÖ The user: {user_id} was removed." if lang == "en" 
                else f"‚úÖ Der Benutzer: {user_id} wurde entfernt." if lang == "de"  
                else f"‚úÖ –ö–æ–ª–¥–æ–Ω—É—É—á—É {user_id} –∂–æ–∫ –∫—ã–ª—ã–Ω–¥—ã.")

    await callback_query.message.edit_text(del_resp)
    await state.clear() 





from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
import os,httpx,sys
from collections import Counter
from stud_reg import is_admin
keyboard_3_kyrg = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ö–∞—Ç—Ç–∞–ª—É—É")]
        ],
        resize_keyboard=True)



MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
async def ask_mistral(prompt: str) -> str:
    if not MISTRAL_API_KEY:
        return "‚ùå –ö–ª—é—á MISTRAL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!"

    url = "https://api.mistral.ai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "mistral-medium",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                url,
                headers=headers,
                json=payload,
                timeout=10000.0  
            )
            print("Status:", response.status_code)
            print("Response text:", response.text)
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"]
    except httpx.HTTPStatusError as http_err:
        return f"‚ùå HTTP –æ—à–∏–±–∫–∞: {http_err.response.status_code}\n{http_err.response.text}"
    except httpx.ReadTimeout:
        return "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è (—Ç–∞–π–º–∞—É—Ç)."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {repr(e)}"

    

    try:
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, headers=headers, json=payload)
            print("Status:", response.status_code)
            print("Response text:", response.text)
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"]
    except httpx.HTTPStatusError as http_err:
        return f"‚ùå HTTP –æ—à–∏–±–∫–∞: {http_err.response.status_code}\n{http_err.response.text}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {repr(e)}"


specialties_kyrg = {
    "–§–∏–ª–æ–ª–æ–≥–∏—è –∂–∞–Ω–∞ –º–∞–¥–∞–Ω–∏—è—Ç–∞—Ä–∞–ª—ã–∫ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏–Ω—Å—Ç–∏—Ç—É—Ç—É":[
    "–ö—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏ –∂–∞–Ω–∞ –∞–¥–∞–±–∏—è—Ç—ã",
    "–ë–∏–ª–∏–º –±–µ—Ä“Ø“Ø –º–µ–∫–µ–º–µ–ª–µ—Ä–∏–Ω–¥–µ –∫—ã—Ä–≥—ã–∑ —ç–º–µ—Å —Ç–∏–ª–¥–µ –æ–∫—É—Ç—É—É–¥–∞–≥—ã –º–∞–º–ª–µ–∫–µ—Ç—Ç–∏–∫ —Ç–∏–ª",
    "–û—Ä—É—Å —Ç–∏–ª–∏ –∂–∞–Ω–∞ –∞–¥–∞–±–∏—è—Ç—ã",
    "–ê–Ω–≥–ª–∏—Å —Ç–∏–ª–∏",
    "–ù–µ–º–∏—Å —Ç–∏–ª–∏",
    "–§—Ä–∞–Ω—Ü—É–∑ —Ç–∏–ª–∏",
    "–ö–æ—Ä–µ–π —Ç–∏–ª–∏",
    "–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞: –ö–æ—Ç–æ—Ä–º–æ –∂–∞–Ω–∞ –∫–æ—Ç–æ—Ä–º–æ —Ç–∞–∞–Ω—É—É",
    "–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞: –ß–µ—Ç —Ç–∏–ª–¥–µ—Ä–∏–Ω –∂–∞–Ω–∞ –º–∞–¥–∞–Ω–∏—è—Ç—Ç–∞—Ä–¥—ã –æ–∫—É—Ç—É—É–Ω—É–Ω —Ç–µ–æ—Ä–∏—è—Å—ã –∂–∞–Ω–∞ –º–µ—Ç–æ–¥–∏–∫–∞—Å—ã"
    ],


    "–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞, –∏—Å–∫—É—Å—Å—Ç–≤–æ –∂–∞–Ω–∞ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç—É":[
    "–ë–∞—à—Ç–∞–ª–≥—ã—á –±–∏–ª–∏–º",
    "–ú–µ–∫—Ç–µ–ø–∫–µ —á–µ–π–∏–Ω–∫–∏ –±–∏–ª–∏–º –∂–∞–Ω–∞ –ª–æ–≥–æ–ø–µ–¥–∏—è",
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è",
    "–ö”©—Ä–∫”©–º –±–∏–ª–∏–º",
    "–ú—É–∑—ã–∫–∞ –∏—Å–∫—É—Å—Å—Ç–≤–æ—Å—É",
    "–°“Ø—Ä”©—Ç –∏—Å–∫—É—Å—Å—Ç–≤–æ—Å—É",
    "–≠—Å—Ç—Ä–∞–¥–∞–ª—ã–∫ –º—É–∑—ã–∫–∞ –∏—Å–∫—É—Å—Å—Ç–≤–æ—Å—É",
    "–î–∏–∑–∞–π–Ω: –∫–∏–π–∏–º –¥–∏–∑–∞–π–Ω—ã, –∏–Ω—Ç–µ—Ä—å–µ—Ä –¥–∏–∑–∞–π–Ω—ã",
    "–ö–∏–π–∏–º –∂–∞–Ω–∞ —Ç–µ–∫—Å—Ç–∏–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–æ—Å—É",
    "–ê–∫—Ç–µ—Ä–¥—É–∫ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
    "–†–µ–∂–∏—Å—Å—É—Ä–∞ (–ö–∏–Ω–æ, –¢–í)",
    "–ö–∏–Ω–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä–ª—É–∫ (–ö–∏–Ω–æ, –¢–í)",
    "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞",
    "–ñ–∞—Ä—ã—è–ª–æ–æ –∂–∞–Ω–∞ –∫–æ–æ–º–¥—É–∫ –º–∞–º–∏–ª–µ–ª–µ—Ä"
    ],


    "–¢–∞—Ä—ã—Ö—ã–π-—é—Ä–∏–¥–∏–∫–∞–ª—ã–∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç": [
    "–°–æ—Ü–∏–∞–ª–¥—ã–∫-—ç–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã–∫ –±–∏–ª–∏–º: –¢–∞—Ä—ã—Ö",
    "–ö–∏—Ç–µ–ø–∫–∞–Ω–∞ —Ç–∞–∞–Ω—É—É –∂–∞–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç —Ç–∞–∞–Ω—É—É",
    "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è",
    "–ö—ã–∑–º–∞—Ç –∏—à–∏",
    "–°–æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞—Å—ã"
    ],



    "–ñ–∞—Ä–∞—Ç—ã–ª—ã—à –∏–ª–∏–º–¥–µ—Ä–∏, –¥–µ–Ω–µ —Ç–∞—Ä–±–∏—è—Å—ã, —Ç—É—Ä–∏–∑–º –∂–∞–Ω–∞ –∞–≥—Ä–∞—Ä–¥—ã–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä –∏–Ω—Å—Ç–∏—Ç—É—Ç—É":[
    "–ñ–∞—Ä–∞—Ç—ã–ª—ã—à –∏–ª–∏–º–¥–µ—Ä–∏: –ë–∏–æ–ª–æ–≥–∏—è",
    "–ñ–∞—Ä–∞—Ç—ã–ª—ã—à –∏–ª–∏–º–¥–µ—Ä–∏: –•–∏–º–∏—è",
    "–ñ–∞—Ä–∞—Ç—ã–ª—ã—à –∏–ª–∏–º–¥–µ—Ä–∏: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
    "–ë–∏–æ–ª–æ–≥–∏—è (–ë–∏–æ–ª–æ–≥–∏—è; –ë–∏–æ–ª–æ–≥–∏—è –∂–∞–Ω–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–ª—ã–∫ –∏—à)",
    "–•–∏–º–∏—è (–ø—Ä–æ—Ñ–∏–ª—å: —Ö–∏–º–∏—è-—ç–∫–æ–ª–æ–≥–∏—è–ª—ã–∫, –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞–ª—ã–∫ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞)",
    "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
    "–¢—É—Ä–∏–∑–º",
    "–ê–≥—Ä–æ–Ω–æ–º–∏—è (–ø—Ä–æ—Ñ–∏–ª—å: –∫–∞—Ä–∞–Ω—Ç–∏–Ω–¥–∏–∫ ”©—Å“Ø–º–¥“Ø–∫—Ç”©—Ä–¥“Ø –∫–æ—Ä–≥–æ–æ)",
    "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∏—è",
    "–ö–æ–ª–¥–æ–Ω–º–æ –≥–µ–æ–¥–µ–∑–∏—è",
    "–î–µ–Ω–µ —Ç–∞—Ä–±–∏—è—Å—ã –∂–∞–Ω–∞ —Å–ø–æ—Ä—Ç"
    ],




    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, —Ç–µ—Ö–Ω–∏–∫–∞ –∂–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞–ª—ã–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä –∏–Ω—Å—Ç–∏—Ç—É—Ç—É": [
    "–§–∏–∑–∏–∫–∞-–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞–ª—ã–∫ –±–∏–ª–∏–º: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∂–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "–§–∏–∑–∏–∫–∞-–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞–ª—ã–∫ –±–∏–ª–∏–º: –§–∏–∑–∏–∫–∞",
    "–ö–æ–ª–¥–æ–Ω–º–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∂–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "Big Data –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞–¥–∞ –∫–æ–ª–¥–æ–Ω–º–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–¥–∞ –∫–æ–ª–¥–æ–Ω–º–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—Ç–µ—Ä–¥–∏ –∂–∞–Ω–∞ —Ñ–∏–Ω–∞–Ω—Å—ã–ª–∞—Ä–¥—ã –∞–≤—Ç–æ–º–∞—Ç—Ç–∞—à—Ç—ã—Ä—ã–ª–≥–∞–Ω –±–∞—à–∫–∞—Ä—É—É",
    "–≠—Å–µ–ø—Ç”©”© —Ç–µ—Ö–Ω–∏–∫–∞—Å—ã–Ω—ã–Ω –∂–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç—Ç–∞—à—Ç—ã—Ä—ã–ª–≥–∞–Ω —Å–∏—Å—Ç–µ–º–¥–µ—Ä–¥–∏–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª—ã–∫ –∫–∞–º—Å—ã–∑–¥–æ–æ—Å—É (–ü–û–í–¢–ê–°)",
    "–ú–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä–¥—ã –∏—à—Ç–µ—Ç“Ø“Ø–Ω“Ø–Ω –∂–∞–Ω–∞ –±–∞—à–∫–∞—Ä—É—É–Ω—É–Ω –∞–≤—Ç–æ–º–∞—Ç—Ç–∞—à—Ç—ã—Ä—ã–ª–≥–∞–Ω —Å–∏—Å—Ç–µ–º–¥–µ—Ä–∏ (–ê–°–û–ò–£)",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞–¥–∞ –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã–∫ —Å–∏—Å—Ç–µ–º–¥–µ—Ä –∂–∞–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä",
    "–ë–∏–ª–∏–º –±–µ—Ä“Ø“Ø–¥”© –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã–∫ —Å–∏—Å—Ç–µ–º–¥–µ—Ä –∂–∞–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä",
    "–ú–∞–∞–ª—ã–º–∞—Ç—Ç—ã–∫ –∫–æ–æ–ø—Å—É–∑–¥—É–∫",
    "–î–µ–Ω —Å–æ–æ–ª—É–∫—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∂–∞–Ω–∞ –±–∏–æ–º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã–∫ –∏–Ω–∂–µ–Ω–µ—Ä–∏—è",
    "–ú–∞–∞–ª—ã–º–∞—Ç—Ç—ã–∫ —Å–∏—Å—Ç–µ–º–¥–µ—Ä–¥–∏–Ω –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞–ª—ã–∫ –∫–∞–º—Å—ã–∑–¥–æ–æ—Å—É –∂–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–ª”©”©—Å“Ø",
    "–í–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä –∂–∞–Ω–∞ –º–æ–±–∏–ª–¥–∏–∫ —Å–∏—Å—Ç–µ–º–¥–µ—Ä–¥–∏–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª—ã–∫ –∫–∞–º—Å—ã–∑–¥–æ–æ—Å—É",
    "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–¥–µ—Ä–¥–∏ –∂–∞–Ω–∞ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞–ª—ã–∫ —Å–∏—Å—Ç–µ–º–¥–µ—Ä–¥–∏ –±–∞—à–∫–∞—Ä—É—É “Ø—á“Ø–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª–∞—Ä–¥—ã –∏—à—Ç–µ–ø —á—ã–≥—É—É",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∂–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–¥–∏–∫ –∞–Ω–∞–ª–∏–∑",
    "–ö–æ–º–ø—å—é—Ç–µ—Ä–¥–∏–∫ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞",
    "–î–∏–∑–∞–π–Ω: –≥—Ä–∞—Ñ–∏–∫–∞–ª—ã–∫ –¥–∏–∑–∞–π–Ω",
    "–≠–ª–µ–∫—Ç—Ä –º–µ–Ω–µ–Ω –∂–∞–±–¥—É—É",
    "–ê–≥—Ä–æ–∏–Ω–∂–µ–Ω–µ—Ä–∏—è",
    "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
    "–¢–µ—Ö–Ω–∏–∫–∞–ª—ã–∫ —Ñ–∏–∑–∏–∫–∞: –ú–µ–¥–∏—Ü–∏–Ω–∞–ª—ã–∫ —Ñ–∏–∑–∏–∫–∞",
    "–¢–µ—Ö–Ω–∏–∫–∞–ª—ã–∫ —Ñ–∏–∑–∏–∫–∞: –ö—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∞–ª—ã–∫ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞–Ω—ã–Ω —Ñ–∏–∑–∏–∫–∞–ª—ã–∫ –º–µ—Ç–æ–¥–¥–æ—Ä—É",
    "–ú–µ—Ö–∞—Ç—Ä–æ–Ω–∏–∫–∞ –∂–∞–Ω–∞ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞"
    ],



    "–≠–∫–æ–Ω–æ–º–∏–∫–∞, –±–∏–∑–Ω–µ—Å –∂–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏–Ω—Å—Ç–∏—Ç—É—Ç—É": [
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞: –§–∏–Ω–∞–Ω—Å—ã –∂–∞–Ω–∞ –∫—Ä–µ–¥–∏—Ç",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞: –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–¥–∏–∫ —ç—Å–µ–ø, –∞–Ω–∞–ª–∏–∑ –∂–∞–Ω–∞ –∞—É–¥–∏—Ç",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞: –ò—à–∫–∞–Ω–∞–¥–∞–≥—ã —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∂–∞–Ω–∞ –±–∞—à–∫–∞—Ä—É—É",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞: –°–∞–ª—ã–∫ –∂–∞–Ω–∞ —Å–∞–ª—ã–∫ —Å–∞–ª—É—É",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞: IT-–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞: –°–∞–Ω–¥—ã–∫ —ç–∫–æ–Ω–æ–º–∏–∫–∞ –∂–∞–Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞–ª—ã–∫ –º–µ—Ç–æ–¥–¥–æ—Ä",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞: –ê—É–¥–∏—Ç –∂–∞–Ω–∞ —Ñ–∏–Ω–∞–Ω—Å—ã–ª—ã–∫ –∫”©–∑”©–º”©–ª",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞: –ë–∏–∑–Ω–µ—Å—Ç–µ —Ñ–∏–Ω–∞–Ω—Å—ã–ª—ã–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞: –§–∏–Ω–∞–Ω—Å—ã–ª—ã–∫ –∫–æ–æ–ø—Å—É–∑–¥—É–∫ –∂–∞–Ω–∞ —Ñ–∏–Ω–∞–Ω—Å—ã–ª—ã–∫ –∫”©–∑”©–º”©–ª",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "–ë–∏–∑–Ω–µ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "–ë–∏–∑–Ω–µ—Å –±–∞—à–∫–∞—Ä—É—É",
    "–ú–∞–º–ª–µ–∫–µ—Ç—Ç–∏–∫ –∂–∞–Ω–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª–¥—ã–∫ –±–∞—à–∫–∞—Ä—É—É",
    "–ö–æ–æ–º–¥—É–∫ –∏—à"
    ],



    "–ß—ã–≥—ã—à —Ç–∞–∞–Ω—É—É –∏–Ω—Å—Ç–∏—Ç—É—Ç—É": [
    "–ß—ã–≥—ã—à —Ç–∞–∞–Ω—É—É: –ß—ã–≥—ã—à —Ç–∏–ª–¥–µ—Ä–∏ –∂–∞–Ω–∞ –¥–∏–ø–ª–æ–º–∞—Ç–∏—è",
    "–ß—ã–≥—ã—à —Ç–∞–∞–Ω—É—É: –ß—ã–≥—ã—à —Ç–∞—Ä—ã—Ö—ã ‚Äì —á—ã–≥—ã—à —Ç–∏–ª–¥–µ—Ä–∏–Ω –æ–∫—É—Ç—É—É –º–µ–Ω–µ–Ω",
    "–§–∏–ª–æ–ª–æ–≥–∏—è: –ß—ã–≥—ã—à —Ç–∏–ª–¥–µ—Ä–∏",
    "–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞: –ö–æ—Ç–æ—Ä–º–æ –∂–∞–Ω–∞ –∫–æ—Ç–æ—Ä–º–æ —Ç–∞–∞–Ω—É—É: –ß—ã–≥—ã—à —Ç–∏–ª–¥–µ—Ä–∏",
    "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–ª–æ–≥–∏—è: –ñ–∞–ª–ø—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–ª–æ–≥–∏—è"
    ],




    "–≠–ª –∞—Ä–∞–ª—ã–∫ –±–∏–ª–∏–º –±–µ—Ä“Ø“Ø –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª–∞—Ä—ã–Ω—ã–Ω –∂–æ–≥–æ—Ä–∫—É –º–µ–∫—Ç–µ–±–∏": [
    "–ê–π–º–∞–∫ —Ç–∞–∞–Ω—É—É: –ß—ã–≥—ã—à –ê–∑–∏—è",
    "–ë–∞—à—Ç–∞–ª–≥—ã—á –±–∏–ª–∏–º. –ê–Ω–≥–ª–∏—Å —Ç–∏–ª–∏",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∂–∞–Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–¥–∏–∫ –∏–ª–∏–º–¥–µ—Ä",
    "–ò–Ω–∂–µ–Ω–µ—Ä–¥–∏–∫ –∂–∞–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª—ã–∫ –¥–æ–ª–±–æ–æ—Ä–ª–æ–æ–¥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–¥–∏–∫ –º–æ–¥–µ–ª–∏—Ä–ª”©”©",
    "–≠–ª –∞—Ä–∞–ª—ã–∫ –º–∞–º–∏–ª–µ–ª–µ—Ä–¥–µ —Å–∞–Ω–¥—ã–∫ –¥–∏–ø–ª–æ–º–∞—Ç–∏—è",
    "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä—ã –∂–∞–Ω–∞ –±–∞—à–∫–∞—Ä—É—É",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞: –î“Ø–π–Ω”©–ª“Ø–∫ —ç–∫–æ–Ω–æ–º–∏–∫–∞",
    "–ï–≤—Ä–æ–ø–∞ —Ç–∞–∞–Ω—É—É",
    "–ë–∏–∑–Ω–µ—Å –±–∞—à–∫–∞—Ä—É—É: –≠–ª –∞—Ä–∞–ª—ã–∫ –±–∏–∑–Ω–µ—Å",
    "–ê–Ω–≥–ª–∏—Å —Ç–∏–ª–∏ –∫–æ—à—É–º—á–∞ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–Ω: –ö–æ—Ç–æ—Ä–º–æ –∂–∞–Ω–∞ –∫–æ—Ç–æ—Ä–º–æ —Ç–∞–∞–Ω—É—É",
    "–ê–Ω–≥–ª–∏—Å —Ç–∏–ª–∏ –∫–æ—à—É–º—á–∞ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–Ω: –ö–æ–º–ø—å—é—Ç–µ—Ä–¥–∏–∫ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞",
    "–≠–ª –∞—Ä–∞–ª—ã–∫ –º–∞–º–∏–ª–µ–ª–µ—Ä",
    "–î“Ø–π–Ω”©–ª“Ø–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∂–∞–Ω–∞ —ç–ª –∞—Ä–∞–ª—ã–∫ —É—é–º–¥–∞—Ä",
    "–ü–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è"
    ],



    "–ö—ã—Ä–≥—ã–∑-–ö—ã—Ç–∞–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∏": [
    "–ö—ã—Ç–∞–π —Ç–∞–∞–Ω—É—É",
    "–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞: –ö–æ—Ç–æ—Ä–º–æ –∂–∞–Ω–∞ –∫–æ—Ç–æ—Ä–º–æ —Ç–∞–∞–Ω—É—É",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∂–∞–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä",
    "–≠–ª–µ–∫—Ç—Ä–æ–Ω–¥—É–∫ –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã–∫ –∏–Ω–∂–µ–Ω–µ—Ä–∏—è",
    "–§–∏–ª–æ–ª–æ–≥–∏—è: –§–∏–ª–æ–ª–æ–≥–∏—è–ª—ã–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–ª–∞—Ä–¥—ã –æ–∫—É—Ç—É—É –º–µ—Ç–æ–¥–∏–∫–∞—Å—ã (–ê–Ω–≥–ª–∏—Å —Ç–∏–ª–∏, –ö—ã—Ç–∞–π —Ç–∏–ª–∏)"
    ],



    "–ú–µ–¥–∏—Ü–∏–Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∏": [
    "–î–∞—Ä—ã–ª–æ–æ –∏—à–∏",
    "–ü–µ–¥–∏–∞—Ç—Ä–∏—è",
    "–ú–µ–¥–∏—Ü–∏–Ω–∞-–∞–ª–¥—ã–Ω –∞–ª—É—É –∏—à–∏",
    "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
    "–§–∞—Ä–º–∞—Ü–∏—è",
    "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞–ª—ã–∫ –∏—à",
    "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è–ª—ã–∫ –∏—à",
    ],



    "–¢–µ–æ–ª–æ–≥–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∏": [
    "–¢–µ–æ–ª–æ–≥–∏—è"],



    "–ê—Ä–∞—à–∞–Ω –≥—É–º–∞–Ω–∏—Ç–∞—Ä–¥—ã–∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç—É": [
    "–¢–µ–æ–ª–æ–≥–∏—è"]
}


question_fields_kyrg = []
for faculty_kyrg, questions_kyrg in [
    ("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, —Ç–µ—Ö–Ω–∏–∫–∞ –∂–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞–ª—ã–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä –∏–Ω—Å—Ç–∏—Ç—É—Ç—É", [
        "üß† –°–∏–∑ –ª–æ–≥–∏–∫–∞–ª—ã–∫ –º–∞—Å–µ–ª–µ–ª–µ—Ä–¥–∏ –∂–∞–Ω–∞ —Ç–∞–±—ã—à–º–∞–∫—Ç–∞—Ä–¥—ã —á–µ—á–∫–µ–Ω–¥–∏ –∂–∞–∫—Ç—ã—Ä–∞—Å—ã–∑–±—ã?",
        "üíª –°–∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª–æ–æ–≥–æ –∂–µ —Å–∞–Ω–∞—Ä–∏–ø—Ç–∏–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–≥–∞ –∫—ã–∑—ã–≥–∞—Å—ã–∑–±—ã?",
        "üî¨ –°–∏–∑–¥–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∂–∞–Ω–∞ —Ñ–∏–∑–∏–∫–∞ —Å—ã—è–∫—Ç—É—É —Ç–∞–∫ –∏–ª–∏–º–¥–µ—Ä –∫—ã–∑—ã–∫—Ç—ã—Ä–∞–±—ã?",
        "ü§ñ –°–∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–≥–∞, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞–≥–∞ –∂–µ —Ä–æ–±–æ—Ç—Ç–æ—Ä–≥–æ –∫—ã–∑—ã–≥–∞—Å—ã–∑–±—ã?",
        "üèõÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–≥–∞, –∏–Ω—Ç–µ—Ä—å–µ—Ä–≥–µ –∂–µ –∫—É—Ä—É–ª—É—à–∫–∞ –∫—ã–∑—ã–≥–∞—Å—ã–∑–±—ã?",
        "üì± –°–∏–∑ –º–æ–±–∏–ª–¥–∏–∫ —Ç–∏—Ä–∫–µ–º–µ–ª–µ—Ä–¥–∏, –≤–µ–±-—Å–∞–π—Ç—Ç–∞—Ä–¥—ã –∂–µ –æ—é–Ω–¥–∞—Ä–¥—ã —Ç“Ø–∑–≥“Ø“£“Ø–∑ –∫–µ–ª–µ–±–∏?",
        "üß© –°–∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–¥–µ—Ä–¥–∏, –ª–æ–≥–∏–∫–∞–Ω—ã –∂–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª–∞—Ä–¥—ã–Ω —Ç“Ø–∑“Ø–º“Ø–Ω —Ç“Ø—à“Ø–Ω–≥”©–Ω–¥“Ø –∂–∞–∫—Ç—ã—Ä–∞—Å—ã–∑–±—ã?",
        "üîß –°–∏–∑ –º–µ—Ö–∞–Ω–∏–∑–º–¥–µ—Ä–¥–∏–Ω, –∂–∞–±–¥—É—É–ª–∞—Ä–¥—ã–Ω –∂–µ —Ä–æ–±–æ—Ç—Ç–æ—Ä–¥—É–Ω –∏—à—Ç–µ—à–∏–Ω–µ –∫—ã–∑—ã–≥–∞—Å—ã–∑–±—ã?",
        "üéÆ –°–∏–∑ ”©–∑ –æ—é–Ω–¥–∞—Ä—ã“£—ã–∑–¥—ã, —Å–∏–º—É–ª—è—Ü–∏—è–ª–∞—Ä—ã“£—ã–∑–¥—ã –∂–µ VR –¥“Ø–π–Ω”©–ª”©—Ä“Ø“£“Ø–∑–¥“Ø —Ç“Ø–∑–≥“Ø“£“Ø–∑ –∫–µ–ª–µ–±–∏?",
        "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–∞—Ä–º–∞–∫—Ç–∞—Ä—ã, –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã–∫ –∫–æ–æ–ø—Å—É–∑–¥—É–∫ –∂–∞–Ω–∞ –∫–∏–±–µ—Ä–∫–æ–æ–ø—Å—É–∑–¥—É–∫ –∫–∞–Ω–¥–∞–π –∏—à—Ç–µ–π—Ç –¥–µ–ø –æ–π–ª–æ–Ω—É–ø –∂–∞—Ç–∞—Å—ã–∑–±—ã?"
    ]),
    ("–≠–∫–æ–Ω–æ–º–∏–∫–∞, –±–∏–∑–Ω–µ—Å –∂–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏–Ω—Å—Ç–∏—Ç—É—Ç—É", [
        "üìä –°–∏–∑ –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä–¥—ã —Ç–∞–ª–¥–∞–ø, —Å–∞–Ω–¥–∞—Ä –º–µ–Ω–µ–Ω –∏—à—Ç”©”©–Ω“Ø –∂–∞–∫—Ç—ã—Ä–∞—Å—ã–∑–±—ã?",
        "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞, –∫–∞—Ä–∂—ã –∂–µ –±–∏–∑–Ω–µ—Å—Ç–µ –∫–∞—Ä—å–µ—Ä–∞ –∫—É—Ä–≥—É“£—É–∑ –∫–µ–ª–µ–±–∏?",
        "üìà –°–∏–∑ –±–∏–∑–Ω–µ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–ª–∞—Ä—ã–Ω–∞, –¥–æ–ª–±–æ–æ—Ä–ª–æ—Ä–¥—É –±–∞—à–∫–∞—Ä—É—É–≥–∞ –∂–µ —Å—Ç–∞—Ä—Ç–∞–ø—Ç–∞—Ä–≥–∞ –∫—ã–∑—ã–≥–∞—Å—ã–∑–±—ã?",
        "üì¶ –°–∏–∑ –ª–æ–≥–∏—Å—Ç–∏–∫–∞–Ω—ã, –∂–µ—Ç–∫–∏—Ä“Ø“Ø –ø—Ä–æ—Ü–µ—Å—Å—Ç–µ—Ä–∏–Ω –∂–µ –∫–∞–º–ø–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç—Ç–∞—à—Ç—ã—Ä—É—É–Ω—É –æ–ø—Ç–∏–º–∞–ª–¥–∞—à—Ç—ã—Ä–≥—ã“£—ã–∑ –∫–µ–ª–µ–±–∏?",
    ]),
    ("–ú–µ–¥–∏—Ü–∏–Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∏", [
        "ü©∫ –°–∏–∑ –º–µ–¥–∏—Ü–∏–Ω–∞–≥–∞, –¥–µ–Ω —Å–æ–æ–ª—É–∫–∫–∞ –∂–µ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–≥–∞ –∫—ã–∑—ã–≥–∞—Å—ã–∑–±—ã?",
        "üè• –°–∏–∑ –∞–Ω–∞—Ç–æ–º–∏—è–Ω—ã, —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è–Ω—ã –∂–∞–Ω–∞ –º–µ–¥–∏—Ü–∏–Ω–∞–Ω—ã–Ω –Ω–µ–≥–∏–∑–¥–µ—Ä–∏–Ω “Ø–π—Ä”©–Ω“Ø“Ø–≥”© –¥–∞—è—Ä—Å—ã–∑–±—ã?",
        "üß¨ –ë–∏–æ–ª–æ–≥–∏—è–≥–∞, –≥–µ–Ω–µ—Ç–∏–∫–∞–≥–∞ –∂–µ –±–∏–æ–º–µ–¥–∏—Ü–∏–Ω–∞–≥–∞ –∫—ã–∑—ã–≥–∞—Å—ã–∑–±—ã?"
    ]),
    ("–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞, –∏—Å–∫—É—Å—Å—Ç–≤–æ –∂–∞–Ω–∞ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç—É", [
        "ü§ù –ê–¥–∞–º–¥–∞—Ä–≥–∞ –∂–∞—à–æ–æ–¥–æ–≥—É –∂–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è–ª—ã–∫ –∫—ã–π—ã–Ω—á—ã–ª—ã–∫—Ç–∞—Ä–¥—ã —á–µ—á“Ø“Ø–≥”© –∂–∞—Ä–¥–∞–º –±–µ—Ä–≥–∏“£–∏–∑ –∫–µ–ª–µ–±–∏?",
        "üé® –°–∏–∑–¥–∏ —á—ã–≥–∞—Ä–º–∞—á—ã–ª—ã–∫–∫–∞, –∏—Å–∫—É—Å—Å—Ç–≤–æ–≥–æ –∂–µ –¥–∏–∑–∞–π–Ω–≥–∞ —Ç–∞—Ä—Ç—ã–ø –∂–∞—Ç–∞–±—ã?",
        "üë©‚Äçüè´–ë–∏–ª–∏–º –º–µ–Ω–µ–Ω –±”©–ª“Ø—à“Ø“Ø –∂–∞–Ω–∞ –±–∞—à–∫–∞–ª–∞—Ä–≥–∞ “Ø–π—Ä”©—Ç“Ø“Ø —Å–∏–∑–≥–µ –∂–∞–≥–∞–±—ã?",
        "üé• –°–∏–∑–¥–∏ –º–µ–¥–∏–∞, –∫–∏–Ω–æ, –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞ –∂–µ —ç–ª –∞–ª–¥—ã–Ω–¥–∞ —Å“Ø–π–ª”©–≥”©–Ω —Å”©–∑–¥”©—Ä –∫—ã–∑—ã–∫—Ç—ã—Ä–∞–±—ã?",
        "üé§ –°–∏–∑ —ç–ª –∞–ª–¥—ã–Ω–¥–∞ —Å“Ø–π–ª”©–ø, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–ª–∞—Ä–¥—ã –∂–∞—Å–∞–≥–∞–Ω–≥–∞ —ã“£–≥–∞–π–ª—É—É—Å—É–∑–±—É?",
        "üß† –°–∏–∑ –∞–¥–∞–º–¥—ã–Ω –æ–π –∂“Ø–≥“Ø—Ä—Ç“Ø“Ø—Å“Ø–Ω”© –∫—ã–∑—ã–≥–∞—Å—ã–∑–±—ã –∂–∞–Ω–∞ –∞–≥–∞ –∫—ã–π—ã–Ω—á—ã–ª—ã–∫—Ç–∞—Ä –º–µ–Ω–µ–Ω –∫“Ø—Ä”©—à“Ø“Ø–≥”© –∫–∞–Ω—Ç–∏–ø –∂–∞—Ä–¥–∞–º –±–µ—Ä–µ –∞–ª–∞—Å—ã–∑?",
        "üë©‚Äçüè´ –ë–∞—à–∫–∞–ª–∞—Ä–¥—ã “Ø–π—Ä”©—Ç“Ø–ø, –º—É–≥–∞–ª–∏–º –∂–µ –Ω–∞—Å–∞–∞—Ç—á—ã –±–æ–ª—É—É–Ω—É –∫–∞–∞–ª–∞–π—Å—ã–∑–±—ã?",
        "üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—Ç–µ—Ä–¥–∏, –≤–∏–∑—É–∞–ª–¥—ã–∫ —Å—Ç–∏–ª–¥–∏ –∂–µ –≥—Ä–∞—Ñ–∏–∫–∞–Ω—ã –∏—à—Ç–µ–ø —á—ã–≥—É—É–Ω—É –∫–∞–∞–ª–∞–π—Å—ã–∑–±—ã?"
    ]),

    ("–≠–ª –∞—Ä–∞–ª—ã–∫ –±–∏–ª–∏–º –±–µ—Ä“Ø“Ø –ø—Ä–æ–≥—Ä–∞–º–º–∞–ª–∞—Ä—ã–Ω—ã–Ω –∂–æ–≥–æ—Ä–∫—É –º–µ–∫—Ç–µ–±–∏", [
        "üåç –≠–ª –∞—Ä–∞–ª—ã–∫ –¥–æ–ª–±–æ–æ—Ä–ª–æ—Ä–≥–æ –∫–∞—Ç—ã—à–∫—ã“£—ã–∑ –∫–µ–ª–µ–±–∏ –∂–µ —á–µ—Ç ”©–ª–∫”©–¥”© –∏—à—Ç–µ–≥–∏“£–∏–∑ –∫–µ–ª–µ–±–∏?",
        "üåè –°–∏–∑ –¥–∏–ø–ª–æ–º–∞—Ç–∏—è–¥–∞ –∏—à—Ç–µ–≥–∏“£–∏–∑ –∫–µ–ª–µ–±–∏, —ç–ª –∞—Ä–∞–ª—ã–∫ —Å“Ø–π–ª”©—à“Ø“Ø–ª”©—Ä–≥”© –∫–∞—Ç—ã—à–∫—ã“£—ã–∑ –∫–µ–ª–µ–±–∏ –∂–µ –≥–µ–æ—Å–∞—è—Å–∞—Ç—Ç—ã –∏–∑–∏–ª–¥–µ–≥–∏“£–∏–∑ –∫–µ–ª–µ–±–∏?",
    ]),
    ("–§–∏–ª–æ–ª–æ–≥–∏—è –∂–∞–Ω–∞ –º–∞–¥–∞–Ω–∏—è—Ç–∞—Ä–∞–ª—ã–∫ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏–Ω—Å—Ç–∏—Ç—É—Ç—É", [
        "üà¥ –°–∏–∑ –±–∞—à–∫–∞ ”©–ª–∫”©–ª”©—Ä–¥“Ø–Ω —á–µ—Ç —Ç–∏–ª–¥–µ—Ä–∏–Ω –∂–∞–Ω–∞ –º–∞–¥–∞–Ω–∏—è—Ç—ã–Ω “Ø–π—Ä”©–Ω“Ø“Ø–Ω“Ø –∂–∞–∫—Ç—ã—Ä–∞—Å—ã–∑–±—ã?",
        "üìö –°–∏–∑–≥–µ –æ–ª—É—Ç—Ç—É—É –∞–¥–∞–±–∏—è—Ç—Ç–∞—Ä–¥—ã “Ø–π—Ä”©–Ω“Ø“Ø –∂–∞–Ω–∞ –∏–∑–∏–ª–¥”©”© –∂“Ø—Ä–≥“Ø–∑“Ø“Ø –∂–∞–≥–∞–±—ã?",
        "üìù –°–∏–∑ –∂–∞–∑—É—É–≥–∞ –∫—ã–∑—ã–≥–∞—Å—ã–∑–±—ã: —ç—Å—Å–µ–ª–µ—Ä, –º–∞–∫–∞–ª–∞–ª–∞—Ä, –æ–∫—É—è–ª–∞—Ä, –±–ª–æ–≥–¥–æ—Ä (–∞–∫—ã—Ä–∫—ã —Å—É—Ä–æ–æ: –±–æ—Ç–∫–æ –∂–æ–æ–ø—Ç–æ—Ä—É“£—É–∑–¥—É –∏—à—Ç–µ–ø —á—ã–≥—É—É–≥–∞ —É–±–∞–∫—ã—Ç (–±–∏—Ä-—ç–∫–∏ —Å–µ–∫—É–Ω–¥) –±–µ—Ä–∏“£–∏–∑)?"
    ])
]:
    
    for q_kyrg in questions_kyrg:
        question_fields_kyrg.append((q_kyrg, faculty_kyrg))


class CareerTestKyrg(StatesGroup):
    q_index = State()
    answers = State()

def yes_no_kb_kyrg(index: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–æ–±–∞", callback_data=f"yes_kyrg_{index}"),
         InlineKeyboardButton(text="–ñ–æ–∫", callback_data=f"no_kyrg_{index}")]
    ])

from stud_reg import is_admin
from database import is_registered

@router_kyrg.message(F.text == "üîç –ö–µ—Å–∏–ø —Ç–∞–Ω–¥–æ–æ")
async def start_test_kerg(message: types.Message, state: FSMContext):
    if not (is_admin(message.from_user.id) or is_registered(message.from_user.id)):
        await message.answer("–ë–æ—Ç—Ç—É–Ω –º“Ø–º–∫“Ø–Ω—á“Ø–ª“Ø–∫—Ç”©—Ä“Ø–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—É “Ø—á“Ø–Ω –∫–∞—Ç—Ç–∞–ª—ã“£—ã–∑.", reply_markup=keyboard_3_kyrg)
        return

    await message.answer(question_fields_kyrg[0][0], reply_markup=yes_no_kb_kyrg(0))
    await state.update_data(q_index=0, answers=[], lang="kg")
    await state.set_state(CareerTestKyrg.q_index)

@router_kyrg.callback_query(lambda c: c.data.startswith(("yes_kyrg_", "no_kyrg_")))
async def handle_answer_kyrg(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data.get("q_index", 0)
    answers = data.get("answers", [])

    current_index = int(callback.data.split("_")[1])
    if current_index != index:
        await callback.answer()
        return

    if callback.data.startswith("yes_kyrg"):
        answers.append(question_fields_kyrg[index][1])

    index += 1

    if index < len(question_fields_kyrg):
        await state.update_data(q_index=index, answers=answers)
        question_text = question_fields_kyrg[index][0]
        await callback.message.edit_text(question_text, reply_markup=yes_no_kb_kyrg(index))
    else:
        await state.clear()
        interests = Counter(answers)
        

def generate_prompt_kyrg(interests):
    return (
        "–°–∏–∑ –∫–µ—Å–∏–ø–∫”©–π –∫–∞—Ä—å–µ—Ä–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã—Å—ã–∑. –ö–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É–Ω –∂–æ–æ–ø—Ç–æ—Ä—É–Ω–∞ —Ç–∞—è–Ω—ã–ø, –∞–≥–∞ —ç“£ —ã–ª–∞–π—ã–∫—Ç—É—É –∞–¥–∏—Å—Ç–∏–∫—Ç–µ—Ä–¥–∏ —Å—É–Ω—É—à—Ç–∞“£—ã–∑. "
        "–ß—ã–≥–∞—Ä—É—É —Ñ–æ—Ä–º–∞—Ç—ã:\n\n"
        "1. –ê–¥–µ–≥–µ–Ω–¥–µ 3-5 —ç“£ —ã–ª–∞–π—ã–∫—Ç—É—É –∏–Ω—Å—Ç–∏—Ç—É—Ç—Ç–∞—Ä–¥—ã/—Ñ–∞–∫—É–ª—å—Ç–µ—Ç—Ç–µ—Ä–¥–∏ –∫—ã–∑—ã–∫—á—ã–ª—ã–∫–∫–∞ –∂–∞—Ä–∞—à–∞ –∏—Ä–µ—Ç—Ç–µ“£–∏–∑\n"
        "2. –ê—Ä –±–∏—Ä –∏–Ω—Å—Ç–∏—Ç—É—Ç “Ø—á“Ø–Ω 2-3 —ç“£ —ã–ª–∞–π—ã–∫—Ç—É—É –∞–¥–∏—Å—Ç–∏–∫—Ç–µ—Ä–¥–∏ –∫”©—Ä—Å”©—Ç“Ø“£“Ø–∑\n"
        "3. –ö—ã—Å–∫–∞—á–∞ —Ç“Ø—à“Ø–Ω–¥“Ø—Ä–º”© –±–µ—Ä“Ø“Ø (1 —Å“Ø–π–ª”©–º)\n"
        "4. –ë–µ—Ä–∏–ª–≥–µ–Ω —Ç–∏–∑–º–µ–¥–µ–Ω –≥–∞–Ω–∞ –∞–¥–∏—Å—Ç–∏–∫—Ç–µ—Ä–¥–∏ –∫–æ–ª–¥–æ–Ω—É“£—É–∑\n\n"
        "–ö–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É–Ω –∫—ã–∑—ã–∫—á—ã–ª—ã–∫—Ç–∞—Ä—ã:\n"
        f"{', '.join(interests)}\n\n"
        "–ñ–µ—Ç–∫–∏–ª–∏–∫—Ç“Ø“Ø –∏–Ω—Å—Ç–∏—Ç—É—Ç—Ç–∞—Ä –∂–∞–Ω–∞ –∞–¥–∏—Å—Ç–∏–∫—Ç–µ—Ä:\n"
        "\n".join([f"üéì *{k}*:\n   - " + "\n   - ".join(v) for k, v in specialties_kyrg.items()]) +
        "\n\n"
        "–ñ–æ–æ–±—É“£—É–∑–¥—É —Ç”©–º”©–Ω–∫“Ø–¥”©–π —Ñ–æ—Ä–º–∞—Ç—Ç–∞“£—ã–∑:\n"
        "üèõ *–ò–Ω—Å—Ç–∏—Ç—É—Ç—Ç—É–Ω –∞—Ç–∞–ª—ã—à—ã*\n"
        "   ‚ú® –ê–¥–∏—Å—Ç–∏–∫ 1 (–∫—ã—Å–∫–∞—á–∞ —Ç“Ø—à“Ø–Ω–¥“Ø—Ä–º”©)\n"
        "   ‚ú® –ê–¥–∏—Å—Ç–∏–∫ 2 (–∫—ã—Å–∫–∞—á–∞ —Ç“Ø—à“Ø–Ω–¥“Ø—Ä–º”©)\n"
        "   ...\n\n"
        "–ö—ã—Å–∫–∞, —Ç–∞–∫ –∂–∞–Ω–∞ –±–µ—Ä–∏–ª–≥–µ–Ω –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä–¥—ã –≥–∞–Ω–∞ –∫–æ–ª–¥–æ–Ω—É“£—É–∑. Answer using only Kyrgyz language"
    )
